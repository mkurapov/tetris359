
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea081f22 	b	20fc90 <main>

Disassembly of section .text:

0020fc90 <main>:
  20fc90:	e3a0d902 	mov	sp, #32768	; 0x8000
  20fc94:	eb000009 	bl	20fcc0 <EnableJTAG>
  20fc98:	eb00002b 	bl	20fd4c <InitFrameBuffer>
  20fc9c:	eb000058 	bl	20fe04 <Init_SNES>

0020fca0 <mainLoop>:
  20fca0:	eb000132 	bl	210170 <Menu_Display>
  20fca4:	eb000136 	bl	210184 <Menu_Run>
  20fca8:	e3500000 	cmp	r0, #0
  20fcac:	0b000000 	bleq	20fcb4 <Quit>
  20fcb0:	eafffffa 	b	20fca0 <mainLoop>

0020fcb4 <Quit>:
  20fcb4:	eb000118 	bl	21011c <Clear_Screen>
  20fcb8:	eaffffff 	b	20fcbc <haltLoop$>

0020fcbc <haltLoop$>:
  20fcbc:	eafffffe 	b	20fcbc <haltLoop$>

0020fcc0 <EnableJTAG>:
  20fcc0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  20fcc4:	e59f0064 	ldr	r0, [pc, #100]	; 20fd30 <dowaitloop+0xc>
  20fcc8:	e0211001 	eor	r1, r1, r1
  20fccc:	e5801000 	str	r1, [r0]
  20fcd0:	eb000012 	bl	20fd20 <dowait>
  20fcd4:	e59f0058 	ldr	r0, [pc, #88]	; 20fd34 <dowaitloop+0x10>
  20fcd8:	e59f1058 	ldr	r1, [pc, #88]	; 20fd38 <dowaitloop+0x14>
  20fcdc:	e5801000 	str	r1, [r0]
  20fce0:	eb00000e 	bl	20fd20 <dowait>
  20fce4:	e0211001 	eor	r1, r1, r1
  20fce8:	e5801000 	str	r1, [r0]
  20fcec:	e59f0048 	ldr	r0, [pc, #72]	; 20fd3c <dowaitloop+0x18>
  20fcf0:	e5901000 	ldr	r1, [r0]
  20fcf4:	e3c11a07 	bic	r1, r1, #28672	; 0x7000
  20fcf8:	e3811a02 	orr	r1, r1, #8192	; 0x2000
  20fcfc:	e5801000 	str	r1, [r0]
  20fd00:	e59f0038 	ldr	r0, [pc, #56]	; 20fd40 <dowaitloop+0x1c>
  20fd04:	e5901000 	ldr	r1, [r0]
  20fd08:	e59f2034 	ldr	r2, [pc, #52]	; 20fd44 <dowaitloop+0x20>
  20fd0c:	e1c11002 	bic	r1, r1, r2
  20fd10:	e59f2030 	ldr	r2, [pc, #48]	; 20fd48 <dowaitloop+0x24>
  20fd14:	e1811002 	orr	r1, r1, r2
  20fd18:	e5801000 	str	r1, [r0]
  20fd1c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0020fd20 <dowait>:
  20fd20:	e3a02f4b 	mov	r2, #300	; 0x12c

0020fd24 <dowaitloop>:
  20fd24:	e2522001 	subs	r2, r2, #1
  20fd28:	1afffffd 	bne	20fd24 <dowaitloop>
  20fd2c:	e12fff1e 	bx	lr
  20fd30:	3f200094 	.word	0x3f200094
  20fd34:	3f200098 	.word	0x3f200098
  20fd38:	0bc00010 	.word	0x0bc00010
  20fd3c:	3f200000 	.word	0x3f200000
  20fd40:	3f200008 	.word	0x3f200008
  20fd44:	00e3ffc0 	.word	0x00e3ffc0
  20fd48:	0061b6c0 	.word	0x0061b6c0

0020fd4c <InitFrameBuffer>:
  20fd4c:	e59f2068 	ldr	r2, [pc, #104]	; 20fdbc <pointerWaitLoop$+0x1c>
  20fd50:	e59f3068 	ldr	r3, [pc, #104]	; 20fdc0 <pointerWaitLoop$+0x20>

0020fd54 <mBoxFullLoop$>:
  20fd54:	e5920018 	ldr	r0, [r2, #24]
  20fd58:	e3100102 	tst	r0, #-2147483648	; 0x80000000
  20fd5c:	1afffffc 	bne	20fd54 <mBoxFullLoop$>
  20fd60:	e2830101 	add	r0, r3, #1073741824	; 0x40000000
  20fd64:	e3800008 	orr	r0, r0, #8
  20fd68:	e5820020 	str	r0, [r2, #32]

0020fd6c <mBoxEmptyLoop$>:
  20fd6c:	e5920018 	ldr	r0, [r2, #24]
  20fd70:	e3100101 	tst	r0, #1073741824	; 0x40000000
  20fd74:	1afffffc 	bne	20fd6c <mBoxEmptyLoop$>
  20fd78:	e5920000 	ldr	r0, [r2]
  20fd7c:	e200100f 	and	r1, r0, #15
  20fd80:	e3310008 	teq	r1, #8
  20fd84:	1afffff8 	bne	20fd6c <mBoxEmptyLoop$>
  20fd88:	e59f0030 	ldr	r0, [pc, #48]	; 20fdc0 <pointerWaitLoop$+0x20>
  20fd8c:	e5901004 	ldr	r1, [r0, #4]
  20fd90:	e3310102 	teq	r1, #-2147483648	; 0x80000000
  20fd94:	0a000001 	beq	20fda0 <pointerWaitLoop$>
  20fd98:	13a00000 	movne	r0, #0
  20fd9c:	112fff1e 	bxne	lr

0020fda0 <pointerWaitLoop$>:
  20fda0:	e59f001c 	ldr	r0, [pc, #28]	; 20fdc4 <pointerWaitLoop$+0x24>
  20fda4:	e5900000 	ldr	r0, [r0]
  20fda8:	e3300000 	teq	r0, #0
  20fdac:	0afffffb 	beq	20fda0 <pointerWaitLoop$>
  20fdb0:	e59f3010 	ldr	r3, [pc, #16]	; 20fdc8 <pointerWaitLoop$+0x28>
  20fdb4:	e5830000 	str	r0, [r3]
  20fdb8:	e12fff1e 	bx	lr
  20fdbc:	3f00b880 	.word	0x3f00b880
  20fdc0:	00009080 	.word	0x00009080
  20fdc4:	000090cc 	.word	0x000090cc
  20fdc8:	000090e0 	.word	0x000090e0

0020fdcc <Get_SNES>:
  20fdcc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  20fdd0:	e59f41a8 	ldr	r4, [pc, #424]	; 20ff80 <Read_Data+0x30>
  20fdd4:	e1d450b0 	ldrh	r5, [r4]
  20fdd8:	eb000018 	bl	20fe40 <Read_SNES>
  20fddc:	e1a07000 	mov	r7, r0
  20fde0:	e1e06005 	mvn	r6, r5
  20fde4:	e0000006 	and	r0, r0, r6
  20fde8:	e1a08000 	mov	r8, r0
  20fdec:	e1c470b0 	strh	r7, [r4]
  20fdf0:	e3a00efa 	mov	r0, #4000	; 0xfa0
  20fdf4:	eb0000d3 	bl	210148 <Wait>
  20fdf8:	e1a00008 	mov	r0, r8
  20fdfc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  20fe00:	e12fff1e 	bx	lr

0020fe04 <Init_SNES>:
  20fe04:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  20fe08:	e3a00009 	mov	r0, #9
  20fe0c:	e3a01001 	mov	r1, #1
  20fe10:	eb000029 	bl	20febc <Init_GPIO>
  20fe14:	e3a0000b 	mov	r0, #11
  20fe18:	e3a01001 	mov	r1, #1
  20fe1c:	eb000026 	bl	20febc <Init_GPIO>
  20fe20:	e3a0000a 	mov	r0, #10
  20fe24:	e3a01000 	mov	r1, #0
  20fe28:	eb000023 	bl	20febc <Init_GPIO>
  20fe2c:	e59f214c 	ldr	r2, [pc, #332]	; 20ff80 <Read_Data+0x30>
  20fe30:	e3a03000 	mov	r3, #0
  20fe34:	e1c230b0 	strh	r3, [r2]
  20fe38:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  20fe3c:	e12fff1e 	bx	lr

0020fe40 <Read_SNES>:
  20fe40:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  20fe44:	e3a00001 	mov	r0, #1
  20fe48:	eb000036 	bl	20ff28 <Write_Clock>
  20fe4c:	e3a00001 	mov	r0, #1
  20fe50:	eb00002a 	bl	20ff00 <Write_Latch>
  20fe54:	e3a0000c 	mov	r0, #12
  20fe58:	eb0000ba 	bl	210148 <Wait>
  20fe5c:	e3a00000 	mov	r0, #0
  20fe60:	eb000026 	bl	20ff00 <Write_Latch>
  20fe64:	e3a04000 	mov	r4, #0
  20fe68:	e3a05000 	mov	r5, #0
  20fe6c:	e3a06001 	mov	r6, #1

0020fe70 <pulseLoop>:
  20fe70:	e3550010 	cmp	r5, #16
  20fe74:	2a00000d 	bcs	20feb0 <endPulseLoop>
  20fe78:	e3a00006 	mov	r0, #6
  20fe7c:	eb0000b1 	bl	210148 <Wait>
  20fe80:	e3a00000 	mov	r0, #0
  20fe84:	eb000027 	bl	20ff28 <Write_Clock>
  20fe88:	e3a00006 	mov	r0, #6
  20fe8c:	eb0000ad 	bl	210148 <Wait>
  20fe90:	eb00002e 	bl	20ff50 <Read_Data>
  20fe94:	e3500000 	cmp	r0, #0
  20fe98:	01844006 	orreq	r4, r4, r6
  20fe9c:	e3a00001 	mov	r0, #1
  20fea0:	eb000020 	bl	20ff28 <Write_Clock>
  20fea4:	e1a06086 	lsl	r6, r6, #1
  20fea8:	e2855001 	add	r5, r5, #1
  20feac:	eaffffef 	b	20fe70 <pulseLoop>

0020feb0 <endPulseLoop>:
  20feb0:	e1a00004 	mov	r0, r4
  20feb4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  20feb8:	e12fff1e 	bx	lr

0020febc <Init_GPIO>:
  20febc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  20fec0:	e3a02000 	mov	r2, #0

0020fec4 <lineLoop>:
  20fec4:	e3500009 	cmp	r0, #9
  20fec8:	8240000a 	subhi	r0, r0, #10
  20fecc:	82822004 	addhi	r2, r2, #4
  20fed0:	8afffffb 	bhi	20fec4 <lineLoop>

0020fed4 <endLineLoop>:
  20fed4:	e59f30a8 	ldr	r3, [pc, #168]	; 20ff84 <Read_Data+0x34>
  20fed8:	e0822003 	add	r2, r2, r3
  20fedc:	e5924000 	ldr	r4, [r2]
  20fee0:	e3a06003 	mov	r6, #3
  20fee4:	e0000096 	mul	r0, r6, r0
  20fee8:	e3a05007 	mov	r5, #7
  20feec:	e1c44015 	bic	r4, r4, r5, lsl r0
  20fef0:	e1844011 	orr	r4, r4, r1, lsl r0
  20fef4:	e5824000 	str	r4, [r2]
  20fef8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  20fefc:	e12fff1e 	bx	lr

0020ff00 <Write_Latch>:
  20ff00:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  20ff04:	e3a01009 	mov	r1, #9
  20ff08:	e59f2074 	ldr	r2, [pc, #116]	; 20ff84 <Read_Data+0x34>
  20ff0c:	e3a03001 	mov	r3, #1
  20ff10:	e1a03113 	lsl	r3, r3, r1
  20ff14:	e3500000 	cmp	r0, #0
  20ff18:	05823028 	streq	r3, [r2, #40]	; 0x28
  20ff1c:	1582301c 	strne	r3, [r2, #28]
  20ff20:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  20ff24:	e12fff1e 	bx	lr

0020ff28 <Write_Clock>:
  20ff28:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  20ff2c:	e3a0100b 	mov	r1, #11
  20ff30:	e59f204c 	ldr	r2, [pc, #76]	; 20ff84 <Read_Data+0x34>
  20ff34:	e3a03001 	mov	r3, #1
  20ff38:	e1a03113 	lsl	r3, r3, r1
  20ff3c:	e3500000 	cmp	r0, #0
  20ff40:	05823028 	streq	r3, [r2, #40]	; 0x28
  20ff44:	1582301c 	strne	r3, [r2, #28]
  20ff48:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  20ff4c:	e12fff1e 	bx	lr

0020ff50 <Read_Data>:
  20ff50:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  20ff54:	e3a0100a 	mov	r1, #10
  20ff58:	e59f3024 	ldr	r3, [pc, #36]	; 20ff84 <Read_Data+0x34>
  20ff5c:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  20ff60:	e3a04001 	mov	r4, #1
  20ff64:	e1a04114 	lsl	r4, r4, r1
  20ff68:	e0022004 	and	r2, r2, r4
  20ff6c:	e3520000 	cmp	r2, #0
  20ff70:	03a00000 	moveq	r0, #0
  20ff74:	13a00001 	movne	r0, #1
  20ff78:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  20ff7c:	e12fff1e 	bx	lr
  20ff80:	000870f8 	.word	0x000870f8
  20ff84:	3f200000 	.word	0x3f200000

0020ff88 <Draw_Pixel>:
  20ff88:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
  20ff8c:	e0804501 	add	r4, r0, r1, lsl #10
  20ff90:	e1a04084 	lsl	r4, r4, #1
  20ff94:	e59f01a4 	ldr	r0, [pc, #420]	; 210140 <Clear_Screen+0x24>
  20ff98:	e5900000 	ldr	r0, [r0]
  20ff9c:	e18020b4 	strh	r2, [r0, r4]
  20ffa0:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
  20ffa4:	e12fff1e 	bx	lr

0020ffa8 <Draw_LineH>:
  20ffa8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  20ffac:	e1a04000 	mov	r4, r0
  20ffb0:	e1a05001 	mov	r5, r1
  20ffb4:	e1a06002 	mov	r6, r2
  20ffb8:	e1a07003 	mov	r7, r3
  20ffbc:	e3a08001 	mov	r8, #1

0020ffc0 <lineHLoop>:
  20ffc0:	e1580007 	cmp	r8, r7
  20ffc4:	8a000006 	bhi	20ffe4 <endLineHLoop>
  20ffc8:	e1a00004 	mov	r0, r4
  20ffcc:	e1a01005 	mov	r1, r5
  20ffd0:	e1a02006 	mov	r2, r6
  20ffd4:	ebffffeb 	bl	20ff88 <Draw_Pixel>
  20ffd8:	e2888001 	add	r8, r8, #1
  20ffdc:	e2844001 	add	r4, r4, #1
  20ffe0:	eafffff6 	b	20ffc0 <lineHLoop>

0020ffe4 <endLineHLoop>:
  20ffe4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  20ffe8:	e12fff1e 	bx	lr

0020ffec <Draw_Box>:
  20ffec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  20fff0:	e1a05000 	mov	r5, r0
  20fff4:	e1a06001 	mov	r6, r1
  20fff8:	e1a07002 	mov	r7, r2
  20fffc:	e1a08003 	mov	r8, r3
  210000:	e1a09004 	mov	r9, r4
  210004:	e3a0a001 	mov	sl, #1

00210008 <lineVLoop>:
  210008:	e15a0009 	cmp	sl, r9
  21000c:	8a000007 	bhi	210030 <endLineVLoop>
  210010:	e1a00005 	mov	r0, r5
  210014:	e1a01006 	mov	r1, r6
  210018:	e1a02007 	mov	r2, r7
  21001c:	e1a03008 	mov	r3, r8
  210020:	ebffffe0 	bl	20ffa8 <Draw_LineH>
  210024:	e28aa001 	add	sl, sl, #1
  210028:	e2866001 	add	r6, r6, #1
  21002c:	eafffff5 	b	210008 <lineVLoop>

00210030 <endLineVLoop>:
  210030:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  210034:	e12fff1e 	bx	lr

00210038 <Draw_Image>:
  210038:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  21003c:	e1a04000 	mov	r4, r0
  210040:	e0d450b2 	ldrh	r5, [r4], #2
  210044:	e0d460b2 	ldrh	r6, [r4], #2
  210048:	e0d470b2 	ldrh	r7, [r4], #2
  21004c:	e0d480b2 	ldrh	r8, [r4], #2
  210050:	e3a09000 	mov	r9, #0

00210054 <outerImageLoop>:
  210054:	e1590008 	cmp	r9, r8
  210058:	2a00000d 	bcs	210094 <endOuterImageLoop>
  21005c:	e3a0a000 	mov	sl, #0

00210060 <innerImageLoop>:
  210060:	e15a0007 	cmp	sl, r7
  210064:	2a000006 	bcs	210084 <endInnerImageLoop>
  210068:	e1a00005 	mov	r0, r5
  21006c:	e1a01006 	mov	r1, r6
  210070:	e0d420b2 	ldrh	r2, [r4], #2
  210074:	ebffffc3 	bl	20ff88 <Draw_Pixel>
  210078:	e28aa001 	add	sl, sl, #1
  21007c:	e2855001 	add	r5, r5, #1
  210080:	eafffff6 	b	210060 <innerImageLoop>

00210084 <endInnerImageLoop>:
  210084:	e2899001 	add	r9, r9, #1
  210088:	e2866001 	add	r6, r6, #1
  21008c:	e0455007 	sub	r5, r5, r7
  210090:	eaffffef 	b	210054 <outerImageLoop>

00210094 <endOuterImageLoop>:
  210094:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  210098:	e12fff1e 	bx	lr

0021009c <Draw_Block>:
  21009c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  2100a0:	e1a04000 	mov	r4, r0
  2100a4:	e3a07020 	mov	r7, #32
  2100a8:	e3a08020 	mov	r8, #32
  2100ac:	e1a05001 	mov	r5, r1
  2100b0:	e0050597 	mul	r5, r7, r5
  2100b4:	e59f0088 	ldr	r0, [pc, #136]	; 210144 <Clear_Screen+0x28>
  2100b8:	e0d010b2 	ldrh	r1, [r0], #2
  2100bc:	e0855001 	add	r5, r5, r1
  2100c0:	e1a06002 	mov	r6, r2
  2100c4:	e0060697 	mul	r6, r7, r6
  2100c8:	e1d010b0 	ldrh	r1, [r0]
  2100cc:	e0866001 	add	r6, r6, r1
  2100d0:	e3a09000 	mov	r9, #0

002100d4 <outerBlockLoop>:
  2100d4:	e1590008 	cmp	r9, r8
  2100d8:	2a00000d 	bcs	210114 <endOuterBlockLoop>
  2100dc:	e3a0a000 	mov	sl, #0

002100e0 <innerBlockLoop>:
  2100e0:	e15a0007 	cmp	sl, r7
  2100e4:	2a000006 	bcs	210104 <endInnerBlockLoop>
  2100e8:	e1a00005 	mov	r0, r5
  2100ec:	e1a01006 	mov	r1, r6
  2100f0:	e0d420b2 	ldrh	r2, [r4], #2
  2100f4:	ebffffa3 	bl	20ff88 <Draw_Pixel>
  2100f8:	e28aa001 	add	sl, sl, #1
  2100fc:	e2855001 	add	r5, r5, #1
  210100:	eafffff6 	b	2100e0 <innerBlockLoop>

00210104 <endInnerBlockLoop>:
  210104:	e2899001 	add	r9, r9, #1
  210108:	e2866001 	add	r6, r6, #1
  21010c:	e0455007 	sub	r5, r5, r7
  210110:	eaffffef 	b	2100d4 <outerBlockLoop>

00210114 <endOuterBlockLoop>:
  210114:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  210118:	e12fff1e 	bx	lr

0021011c <Clear_Screen>:
  21011c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  210120:	e3a00000 	mov	r0, #0
  210124:	e3a01000 	mov	r1, #0
  210128:	e3a02000 	mov	r2, #0
  21012c:	e3a03b01 	mov	r3, #1024	; 0x400
  210130:	e3a04c03 	mov	r4, #768	; 0x300
  210134:	ebffffac 	bl	20ffec <Draw_Box>
  210138:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  21013c:	e12fff1e 	bx	lr
  210140:	000090e0 	.word	0x000090e0
  210144:	000090f0 	.word	0x000090f0

00210148 <Wait>:
  210148:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  21014c:	e59f1018 	ldr	r1, [pc, #24]	; 21016c <endDelayLoop+0x8>
  210150:	e5912000 	ldr	r2, [r1]
  210154:	e0823000 	add	r3, r2, r0

00210158 <delayLoop>:
  210158:	e5914000 	ldr	r4, [r1]
  21015c:	e1540003 	cmp	r4, r3
  210160:	3afffffc 	bcc	210158 <delayLoop>

00210164 <endDelayLoop>:
  210164:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  210168:	e12fff1e 	bx	lr
  21016c:	3f003004 	.word	0x3f003004

00210170 <Menu_Display>:
  210170:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  210174:	e59f0068 	ldr	r0, [pc, #104]	; 2101e4 <endMenuDisplayLoop+0xc>
  210178:	ebffffae 	bl	210038 <Draw_Image>
  21017c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  210180:	e12fff1e 	bx	lr

00210184 <Menu_Run>:
  210184:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  210188:	e3a08001 	mov	r8, #1
  21018c:	e3a00001 	mov	r0, #1
  210190:	e3a05010 	mov	r5, #16
  210194:	e3a06020 	mov	r6, #32
  210198:	e3a04c01 	mov	r4, #256	; 0x100

0021019c <menuDisplayLoop>:
  21019c:	ebffff0a 	bl	20fdcc <Get_SNES>
  2101a0:	e0047000 	and	r7, r4, r0
  2101a4:	e3570000 	cmp	r7, #0
  2101a8:	1a00000a 	bne	2101d8 <endMenuDisplayLoop>
  2101ac:	e0057000 	and	r7, r5, r0
  2101b0:	e3570000 	cmp	r7, #0
  2101b4:	13a08001 	movne	r8, #1
  2101b8:	159f0028 	ldrne	r0, [pc, #40]	; 2101e8 <endMenuDisplayLoop+0x10>
  2101bc:	1bffff9d 	blne	210038 <Draw_Image>
  2101c0:	e0067000 	and	r7, r6, r0
  2101c4:	e3570000 	cmp	r7, #0
  2101c8:	13a08000 	movne	r8, #0
  2101cc:	159f0018 	ldrne	r0, [pc, #24]	; 2101ec <endMenuDisplayLoop+0x14>
  2101d0:	1bffff98 	blne	210038 <Draw_Image>
  2101d4:	eafffff0 	b	21019c <menuDisplayLoop>

002101d8 <endMenuDisplayLoop>:
  2101d8:	e1a00008 	mov	r0, r8
  2101dc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  2101e0:	e12fff1e 	bx	lr
  2101e4:	000870f8 	.word	0x000870f8
  2101e8:	00207100 	.word	0x00207100
  2101ec:	002092c8 	.word	0x002092c8

002101f0 <InitUART>:
  2101f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  2101f4:	e59f017c 	ldr	r0, [pc, #380]	; 210378 <WaitForCycles+0x10>
  2101f8:	e3a01001 	mov	r1, #1
  2101fc:	e5801000 	str	r1, [r0]
  210200:	e59f0174 	ldr	r0, [pc, #372]	; 21037c <WaitForCycles+0x14>
  210204:	e0211001 	eor	r1, r1, r1
  210208:	e5801000 	str	r1, [r0]
  21020c:	e59f016c 	ldr	r0, [pc, #364]	; 210380 <WaitForCycles+0x18>
  210210:	e0211001 	eor	r1, r1, r1
  210214:	e5801000 	str	r1, [r0]
  210218:	e59f0164 	ldr	r0, [pc, #356]	; 210384 <WaitForCycles+0x1c>
  21021c:	e3a01003 	mov	r1, #3
  210220:	e5801000 	str	r1, [r0]
  210224:	e59f015c 	ldr	r0, [pc, #348]	; 210388 <WaitForCycles+0x20>
  210228:	e0211001 	eor	r1, r1, r1
  21022c:	e5801000 	str	r1, [r0]
  210230:	e59f0144 	ldr	r0, [pc, #324]	; 21037c <WaitForCycles+0x14>
  210234:	e0211001 	eor	r1, r1, r1
  210238:	e5801000 	str	r1, [r0]
  21023c:	e59f0148 	ldr	r0, [pc, #328]	; 21038c <WaitForCycles+0x24>
  210240:	e3a010c6 	mov	r1, #198	; 0xc6
  210244:	e5801000 	str	r1, [r0]
  210248:	e59f0140 	ldr	r0, [pc, #320]	; 210390 <WaitForCycles+0x28>
  21024c:	e59f1140 	ldr	r1, [pc, #320]	; 210394 <WaitForCycles+0x2c>
  210250:	e5801000 	str	r1, [r0]
  210254:	e3a0000e 	mov	r0, #14
  210258:	e3a01002 	mov	r1, #2
  21025c:	eb000053 	bl	2103b0 <SetGpioFunction>
  210260:	e3a0000f 	mov	r0, #15
  210264:	e3a01002 	mov	r1, #2
  210268:	eb000050 	bl	2103b0 <SetGpioFunction>
  21026c:	e59f0124 	ldr	r0, [pc, #292]	; 210398 <WaitForCycles+0x30>
  210270:	e0211001 	eor	r1, r1, r1
  210274:	e5801000 	str	r1, [r0]
  210278:	e3a00096 	mov	r0, #150	; 0x96
  21027c:	eb000039 	bl	210368 <WaitForCycles>
  210280:	e59f0114 	ldr	r0, [pc, #276]	; 21039c <WaitForCycles+0x34>
  210284:	e3a01903 	mov	r1, #49152	; 0xc000
  210288:	e5801000 	str	r1, [r0]
  21028c:	e3a00096 	mov	r0, #150	; 0x96
  210290:	eb000034 	bl	210368 <WaitForCycles>
  210294:	e59f0100 	ldr	r0, [pc, #256]	; 21039c <WaitForCycles+0x34>
  210298:	e0211001 	eor	r1, r1, r1
  21029c:	e5801000 	str	r1, [r0]
  2102a0:	e59f00d8 	ldr	r0, [pc, #216]	; 210380 <WaitForCycles+0x18>
  2102a4:	e3a01003 	mov	r1, #3
  2102a8:	e5801000 	str	r1, [r0]
  2102ac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

002102b0 <PutCharUART>:
  2102b0:	e59f20e8 	ldr	r2, [pc, #232]	; 2103a0 <WaitForCycles+0x38>

002102b4 <putWaitLoop$>:
  2102b4:	e5921000 	ldr	r1, [r2]
  2102b8:	e3110020 	tst	r1, #32
  2102bc:	0afffffc 	beq	2102b4 <putWaitLoop$>
  2102c0:	e59f20dc 	ldr	r2, [pc, #220]	; 2103a4 <WaitForCycles+0x3c>
  2102c4:	e5820000 	str	r0, [r2]
  2102c8:	e1a0f00e 	mov	pc, lr

002102cc <GetCharUART>:
  2102cc:	e59f20cc 	ldr	r2, [pc, #204]	; 2103a0 <WaitForCycles+0x38>

002102d0 <getWaitLoop$>:
  2102d0:	e5921000 	ldr	r1, [r2]
  2102d4:	e3110001 	tst	r1, #1
  2102d8:	0afffffc 	beq	2102d0 <getWaitLoop$>
  2102dc:	e59f20c0 	ldr	r2, [pc, #192]	; 2103a4 <WaitForCycles+0x3c>
  2102e0:	e5920000 	ldr	r0, [r2]
  2102e4:	e1a0f00e 	mov	pc, lr

002102e8 <WriteStringUART>:
  2102e8:	e92d4030 	push	{r4, r5, lr}
  2102ec:	e1a04000 	mov	r4, r0
  2102f0:	e1a05001 	mov	r5, r1
  2102f4:	e3a06000 	mov	r6, #0

002102f8 <writeLoop$>:
  2102f8:	e3550000 	cmp	r5, #0
  2102fc:	da000004 	ble	210314 <writeLoopEnd$>
  210300:	e7d40006 	ldrb	r0, [r4, r6]
  210304:	ebffffe9 	bl	2102b0 <PutCharUART>
  210308:	e2866001 	add	r6, r6, #1
  21030c:	e2455001 	sub	r5, r5, #1
  210310:	eafffff8 	b	2102f8 <writeLoop$>

00210314 <writeLoopEnd$>:
  210314:	e8bd8030 	pop	{r4, r5, pc}

00210318 <ReadLineUART>:
  210318:	e92d4070 	push	{r4, r5, r6, lr}
  21031c:	e1a04000 	mov	r4, r0
  210320:	e1a05001 	mov	r5, r1
  210324:	e3a06000 	mov	r6, #0

00210328 <readLoop$>:
  210328:	e1360005 	teq	r6, r5
  21032c:	0a00000b 	beq	210360 <readLoopEnd$>
  210330:	ebffffe5 	bl	2102cc <GetCharUART>
  210334:	ebffffdd 	bl	2102b0 <PutCharUART>
  210338:	e5c40000 	strb	r0, [r4]
  21033c:	e2866001 	add	r6, r6, #1
  210340:	e2844001 	add	r4, r4, #1
  210344:	e330000d 	teq	r0, #13
  210348:	1afffff6 	bne	210328 <readLoop$>
  21034c:	e3a0000a 	mov	r0, #10
  210350:	ebffffd6 	bl	2102b0 <PutCharUART>
  210354:	e2444001 	sub	r4, r4, #1
  210358:	e3a00000 	mov	r0, #0
  21035c:	e5c40000 	strb	r0, [r4]

00210360 <readLoopEnd$>:
  210360:	e2460001 	sub	r0, r6, #1
  210364:	e8bd8070 	pop	{r4, r5, r6, pc}

00210368 <WaitForCycles>:
  210368:	e2400001 	sub	r0, r0, #1
  21036c:	e3500000 	cmp	r0, #0
  210370:	aafffffc 	bge	210368 <WaitForCycles>
  210374:	e1a0f00e 	mov	pc, lr
  210378:	3f215004 	.word	0x3f215004
  21037c:	3f215044 	.word	0x3f215044
  210380:	3f215060 	.word	0x3f215060
  210384:	3f21504c 	.word	0x3f21504c
  210388:	3f215050 	.word	0x3f215050
  21038c:	3f215048 	.word	0x3f215048
  210390:	3f215068 	.word	0x3f215068
  210394:	0000010e 	.word	0x0000010e
  210398:	3f200094 	.word	0x3f200094
  21039c:	3f200098 	.word	0x3f200098
  2103a0:	3f215054 	.word	0x3f215054
  2103a4:	3f215040 	.word	0x3f215040

002103a8 <GetGpioAddress>:
  2103a8:	e59f00cc 	ldr	r0, [pc, #204]	; 21047c <GetGpio+0x44>
  2103ac:	e1a0f00e 	mov	pc, lr

002103b0 <SetGpioFunction>:
  2103b0:	e3500035 	cmp	r0, #53	; 0x35
  2103b4:	93510007 	cmpls	r1, #7
  2103b8:	81a0f00e 	movhi	pc, lr
  2103bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  2103c0:	e1a02000 	mov	r2, r0
  2103c4:	ebfffff7 	bl	2103a8 <GetGpioAddress>

002103c8 <functionLoop$>:
  2103c8:	e3520009 	cmp	r2, #9
  2103cc:	8242200a 	subhi	r2, r2, #10
  2103d0:	82800004 	addhi	r0, r0, #4
  2103d4:	8afffffb 	bhi	2103c8 <functionLoop$>
  2103d8:	e0822082 	add	r2, r2, r2, lsl #1
  2103dc:	e1a01211 	lsl	r1, r1, r2
  2103e0:	e3a03007 	mov	r3, #7
  2103e4:	e1a03213 	lsl	r3, r3, r2
  2103e8:	e5902000 	ldr	r2, [r0]
  2103ec:	e1c22003 	bic	r2, r2, r3
  2103f0:	e1811002 	orr	r1, r1, r2
  2103f4:	e5801000 	str	r1, [r0]
  2103f8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

002103fc <SetGpio>:
  2103fc:	e3500035 	cmp	r0, #53	; 0x35
  210400:	81a0f00e 	movhi	pc, lr
  210404:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  210408:	e1a02000 	mov	r2, r0
  21040c:	ebffffe5 	bl	2103a8 <GetGpioAddress>
  210410:	e1a032a2 	lsr	r3, r2, #5
  210414:	e1a03103 	lsl	r3, r3, #2
  210418:	e0800003 	add	r0, r0, r3
  21041c:	e202201f 	and	r2, r2, #31
  210420:	e3a03001 	mov	r3, #1
  210424:	e1a03213 	lsl	r3, r3, r2
  210428:	e3310000 	teq	r1, #0
  21042c:	05803028 	streq	r3, [r0, #40]	; 0x28
  210430:	1580301c 	strne	r3, [r0, #28]
  210434:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00210438 <GetGpio>:
  210438:	e3500035 	cmp	r0, #53	; 0x35
  21043c:	81a0f00e 	movhi	pc, lr
  210440:	e92d4010 	push	{r4, lr}
  210444:	e1a04000 	mov	r4, r0
  210448:	ebffffd6 	bl	2103a8 <GetGpioAddress>
  21044c:	e1a032a4 	lsr	r3, r4, #5
  210450:	e1a03103 	lsl	r3, r3, #2
  210454:	e0800003 	add	r0, r0, r3
  210458:	e204401f 	and	r4, r4, #31
  21045c:	e3a03001 	mov	r3, #1
  210460:	e1a03413 	lsl	r3, r3, r4
  210464:	e5904034 	ldr	r4, [r0, #52]	; 0x34
  210468:	e0044003 	and	r4, r4, r3
  21046c:	e3340000 	teq	r4, #0
  210470:	03a00000 	moveq	r0, #0
  210474:	13a00001 	movne	r0, #1
  210478:	e8bd8010 	pop	{r4, pc}
  21047c:	3f200000 	.word	0x3f200000
